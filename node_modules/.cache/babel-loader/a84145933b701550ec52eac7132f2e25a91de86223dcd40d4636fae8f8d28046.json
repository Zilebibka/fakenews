{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tema\\\\Desktop\\\\fakenews\\\\src\\\\contexts\\\\ThemeContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/createContext();\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  // Проверяем, есть ли сохраненная тема в localStorage\n  const savedTheme = localStorage.getItem('theme');\n  const [theme, setTheme] = useState(savedTheme || 'light');\n\n  // Сохраняем тему в localStorage при изменении\n  useEffect(() => {\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  // Функция для переключения темы\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n  const value = {\n    theme,\n    toggleTheme\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"TzK84p544WBy7qfasvoo92VT634=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","ThemeProvider","children","_s","savedTheme","localStorage","getItem","theme","setTheme","setItem","toggleTheme","prevTheme","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Tema/Desktop/fakenews/src/contexts/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const ThemeContext = createContext();\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  // Проверяем, есть ли сохраненная тема в localStorage\r\n  const savedTheme = localStorage.getItem('theme');\r\n  const [theme, setTheme] = useState(savedTheme || 'light');\r\n\r\n  // Сохраняем тему в localStorage при изменении\r\n  useEffect(() => {\r\n    localStorage.setItem('theme', theme);\r\n  }, [theme]);\r\n\r\n  // Функция для переключения темы\r\n  const toggleTheme = () => {\r\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\r\n  };\r\n\r\n  const value = {\r\n    theme,\r\n    toggleTheme\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={value}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n}; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,OAAO,MAAMC,YAAY,gBAAGL,aAAa,CAAC,CAAC;AAE3C,OAAO,MAAMM,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C;EACA,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAChD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAACQ,UAAU,IAAI,OAAO,CAAC;;EAEzD;EACAP,SAAS,CAAC,MAAM;IACdQ,YAAY,CAACI,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;EACtC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;;EAEX;EACA,MAAMG,WAAW,GAAGA,CAAA,KAAM;IACxBF,QAAQ,CAACG,SAAS,IAAIA,SAAS,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;EACjE,CAAC;EAED,MAAMC,KAAK,GAAG;IACZL,KAAK;IACLG;EACF,CAAC;EAED,oBACEX,OAAA,CAACC,YAAY,CAACa,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAV,QAAA,EACjCA;EAAQ;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACd,EAAA,CAzBWF,aAAa;AAAAiB,EAAA,GAAbjB,aAAa;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}