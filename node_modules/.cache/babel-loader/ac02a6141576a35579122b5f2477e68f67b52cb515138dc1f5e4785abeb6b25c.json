{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tema\\\\Desktop\\\\fakenews\\\\src\\\\contexts\\\\NewsContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { generateNewsTitle } from '../utils/titleGenerator';\nimport { generateNewsContent } from '../utils/contentGenerator';\nimport { getImageForNews } from '../utils/imageGenerator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NewsContext = /*#__PURE__*/createContext();\nexport const NewsProvider = ({\n  children\n}) => {\n  _s();\n  const [news, setNews] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Загружаем новости из localStorage при инициализации\n  useEffect(() => {\n    const savedNews = localStorage.getItem('news');\n    if (savedNews) {\n      setNews(JSON.parse(savedNews));\n    }\n    setLoading(false);\n  }, []);\n\n  // Сохраняем новости в localStorage при изменении\n  useEffect(() => {\n    if (!loading) {\n      localStorage.setItem('news', JSON.stringify(news));\n    }\n  }, [news, loading]);\n\n  // Генерация новой новости\n  const generateNews = category => {\n    const title = generateNewsTitle(category);\n    const content = generateNewsContent(title, category);\n    const image = getImageForNews(title, category);\n    const newNews = {\n      id: Date.now().toString(),\n      title,\n      content,\n      image,\n      category,\n      createdAt: new Date().toISOString(),\n      likes: 0,\n      reactions: {\n        laugh: 0,\n        surprise: 0,\n        sad: 0,\n        angry: 0\n      },\n      comments: []\n    };\n    setNews(prevNews => [newNews, ...prevNews]);\n    return newNews;\n  };\n\n  // Получение новости по ID\n  const getNewsById = id => {\n    return news.find(item => item.id === id) || null;\n  };\n\n  // Добавление лайка к новости\n  const likeNews = (id, userId) => {\n    setNews(prevNews => prevNews.map(item => {\n      if (item.id === id) {\n        // Проверяем, не лайкнул ли пользователь уже эту новость\n        const likedBy = item.likedBy || [];\n        if (likedBy.includes(userId)) {\n          // Если уже лайкнул, то убираем лайк\n          return {\n            ...item,\n            likes: item.likes - 1,\n            likedBy: likedBy.filter(id => id !== userId)\n          };\n        } else {\n          // Если еще не лайкнул, то добавляем лайк\n          return {\n            ...item,\n            likes: item.likes + 1,\n            likedBy: [...likedBy, userId]\n          };\n        }\n      }\n      return item;\n    }));\n  };\n\n  // Добавление реакции к новости\n  const addReaction = (id, reaction, userId) => {\n    setNews(prevNews => prevNews.map(item => {\n      if (item.id === id) {\n        // Проверяем, не реагировал ли пользователь уже на эту новость\n        const reactedBy = item.reactedBy || {};\n        const userReaction = reactedBy[userId];\n\n        // Если пользователь уже реагировал этой реакцией, то убираем ее\n        if (userReaction === reaction) {\n          const newReactedBy = {\n            ...reactedBy\n          };\n          delete newReactedBy[userId];\n          return {\n            ...item,\n            reactions: {\n              ...item.reactions,\n              [reaction]: item.reactions[reaction] - 1\n            },\n            reactedBy: newReactedBy\n          };\n        }\n        // Если пользователь реагировал другой реакцией, то меняем ее\n        else if (userReaction) {\n          return {\n            ...item,\n            reactions: {\n              ...item.reactions,\n              [userReaction]: item.reactions[userReaction] - 1,\n              [reaction]: item.reactions[reaction] + 1\n            },\n            reactedBy: {\n              ...reactedBy,\n              [userId]: reaction\n            }\n          };\n        }\n        // Если пользователь еще не реагировал, то добавляем реакцию\n        else {\n          return {\n            ...item,\n            reactions: {\n              ...item.reactions,\n              [reaction]: item.reactions[reaction] + 1\n            },\n            reactedBy: {\n              ...reactedBy,\n              [userId]: reaction\n            }\n          };\n        }\n      }\n      return item;\n    }));\n  };\n\n  // Добавление новости в избранное\n  const toggleFavorite = (newsId, userId) => {\n    // Получаем пользователя из localStorage\n    const user = JSON.parse(localStorage.getItem('user'));\n    if (!user) return;\n\n    // Проверяем, есть ли новость в избранном\n    const favoriteNews = user.preferences.favoriteNews || [];\n    const isFavorite = favoriteNews.includes(newsId);\n\n    // Обновляем список избранных новостей\n    const updatedFavoriteNews = isFavorite ? favoriteNews.filter(id => id !== newsId) : [...favoriteNews, newsId];\n\n    // Обновляем пользователя\n    const updatedUser = {\n      ...user,\n      preferences: {\n        ...user.preferences,\n        favoriteNews: updatedFavoriteNews\n      }\n    };\n\n    // Сохраняем обновленного пользователя\n    localStorage.setItem('user', JSON.stringify(updatedUser));\n\n    // Обновляем список пользователей\n    const users = JSON.parse(localStorage.getItem('users') || '[]');\n    const updatedUsers = users.map(u => u.id === userId ? updatedUser : u);\n    localStorage.setItem('users', JSON.stringify(updatedUsers));\n    return updatedFavoriteNews;\n  };\n\n  // Получение избранных новостей пользователя\n  const getFavoriteNews = userId => {\n    const user = JSON.parse(localStorage.getItem('user'));\n    if (!user) return [];\n    const favoriteNewsIds = user.preferences.favoriteNews || [];\n    return news.filter(item => favoriteNewsIds.includes(item.id));\n  };\n\n  // Фильтрация новостей по категориям\n  const filterNewsByCategories = categories => {\n    if (!categories || categories.length === 0) {\n      return news;\n    }\n    return news.filter(item => categories.includes(item.category));\n  };\n  const value = {\n    news,\n    loading,\n    generateNews,\n    getNewsById,\n    likeNews,\n    addReaction,\n    toggleFavorite,\n    getFavoriteNews,\n    filterNewsByCategories\n  };\n  return /*#__PURE__*/_jsxDEV(NewsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n};\n_s(NewsProvider, \"OtIbJq1/l0tV7xSNyTRw6ECKOBk=\");\n_c = NewsProvider;\nvar _c;\n$RefreshReg$(_c, \"NewsProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","generateNewsTitle","generateNewsContent","getImageForNews","jsxDEV","_jsxDEV","NewsContext","NewsProvider","children","_s","news","setNews","loading","setLoading","savedNews","localStorage","getItem","JSON","parse","setItem","stringify","generateNews","category","title","content","image","newNews","id","Date","now","toString","createdAt","toISOString","likes","reactions","laugh","surprise","sad","angry","comments","prevNews","getNewsById","find","item","likeNews","userId","map","likedBy","includes","filter","addReaction","reaction","reactedBy","userReaction","newReactedBy","toggleFavorite","newsId","user","favoriteNews","preferences","isFavorite","updatedFavoriteNews","updatedUser","users","updatedUsers","u","getFavoriteNews","favoriteNewsIds","filterNewsByCategories","categories","length","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Tema/Desktop/fakenews/src/contexts/NewsContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport { generateNewsTitle } from '../utils/titleGenerator';\r\nimport { generateNewsContent } from '../utils/contentGenerator';\r\nimport { getImageForNews } from '../utils/imageGenerator';\r\n\r\nexport const NewsContext = createContext();\r\n\r\nexport const NewsProvider = ({ children }) => {\r\n  const [news, setNews] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Загружаем новости из localStorage при инициализации\r\n  useEffect(() => {\r\n    const savedNews = localStorage.getItem('news');\r\n    if (savedNews) {\r\n      setNews(JSON.parse(savedNews));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Сохраняем новости в localStorage при изменении\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      localStorage.setItem('news', JSON.stringify(news));\r\n    }\r\n  }, [news, loading]);\r\n\r\n  // Генерация новой новости\r\n  const generateNews = (category) => {\r\n    const title = generateNewsTitle(category);\r\n    const content = generateNewsContent(title, category);\r\n    const image = getImageForNews(title, category);\r\n\r\n    const newNews = {\r\n      id: Date.now().toString(),\r\n      title,\r\n      content,\r\n      image,\r\n      category,\r\n      createdAt: new Date().toISOString(),\r\n      likes: 0,\r\n      reactions: {\r\n        laugh: 0,\r\n        surprise: 0,\r\n        sad: 0,\r\n        angry: 0\r\n      },\r\n      comments: []\r\n    };\r\n\r\n    setNews(prevNews => [newNews, ...prevNews]);\r\n    return newNews;\r\n  };\r\n\r\n  // Получение новости по ID\r\n  const getNewsById = (id) => {\r\n    return news.find(item => item.id === id) || null;\r\n  };\r\n\r\n  // Добавление лайка к новости\r\n  const likeNews = (id, userId) => {\r\n    setNews(prevNews => \r\n      prevNews.map(item => {\r\n        if (item.id === id) {\r\n          // Проверяем, не лайкнул ли пользователь уже эту новость\r\n          const likedBy = item.likedBy || [];\r\n          if (likedBy.includes(userId)) {\r\n            // Если уже лайкнул, то убираем лайк\r\n            return {\r\n              ...item,\r\n              likes: item.likes - 1,\r\n              likedBy: likedBy.filter(id => id !== userId)\r\n            };\r\n          } else {\r\n            // Если еще не лайкнул, то добавляем лайк\r\n            return {\r\n              ...item,\r\n              likes: item.likes + 1,\r\n              likedBy: [...likedBy, userId]\r\n            };\r\n          }\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n  };\r\n\r\n  // Добавление реакции к новости\r\n  const addReaction = (id, reaction, userId) => {\r\n    setNews(prevNews => \r\n      prevNews.map(item => {\r\n        if (item.id === id) {\r\n          // Проверяем, не реагировал ли пользователь уже на эту новость\r\n          const reactedBy = item.reactedBy || {};\r\n          const userReaction = reactedBy[userId];\r\n          \r\n          // Если пользователь уже реагировал этой реакцией, то убираем ее\r\n          if (userReaction === reaction) {\r\n            const newReactedBy = { ...reactedBy };\r\n            delete newReactedBy[userId];\r\n            \r\n            return {\r\n              ...item,\r\n              reactions: {\r\n                ...item.reactions,\r\n                [reaction]: item.reactions[reaction] - 1\r\n              },\r\n              reactedBy: newReactedBy\r\n            };\r\n          } \r\n          // Если пользователь реагировал другой реакцией, то меняем ее\r\n          else if (userReaction) {\r\n            return {\r\n              ...item,\r\n              reactions: {\r\n                ...item.reactions,\r\n                [userReaction]: item.reactions[userReaction] - 1,\r\n                [reaction]: item.reactions[reaction] + 1\r\n              },\r\n              reactedBy: {\r\n                ...reactedBy,\r\n                [userId]: reaction\r\n              }\r\n            };\r\n          } \r\n          // Если пользователь еще не реагировал, то добавляем реакцию\r\n          else {\r\n            return {\r\n              ...item,\r\n              reactions: {\r\n                ...item.reactions,\r\n                [reaction]: item.reactions[reaction] + 1\r\n              },\r\n              reactedBy: {\r\n                ...reactedBy,\r\n                [userId]: reaction\r\n              }\r\n            };\r\n          }\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n  };\r\n\r\n  // Добавление новости в избранное\r\n  const toggleFavorite = (newsId, userId) => {\r\n    // Получаем пользователя из localStorage\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    if (!user) return;\r\n\r\n    // Проверяем, есть ли новость в избранном\r\n    const favoriteNews = user.preferences.favoriteNews || [];\r\n    const isFavorite = favoriteNews.includes(newsId);\r\n\r\n    // Обновляем список избранных новостей\r\n    const updatedFavoriteNews = isFavorite\r\n      ? favoriteNews.filter(id => id !== newsId)\r\n      : [...favoriteNews, newsId];\r\n\r\n    // Обновляем пользователя\r\n    const updatedUser = {\r\n      ...user,\r\n      preferences: {\r\n        ...user.preferences,\r\n        favoriteNews: updatedFavoriteNews\r\n      }\r\n    };\r\n\r\n    // Сохраняем обновленного пользователя\r\n    localStorage.setItem('user', JSON.stringify(updatedUser));\r\n\r\n    // Обновляем список пользователей\r\n    const users = JSON.parse(localStorage.getItem('users') || '[]');\r\n    const updatedUsers = users.map(u => \r\n      u.id === userId ? updatedUser : u\r\n    );\r\n    localStorage.setItem('users', JSON.stringify(updatedUsers));\r\n\r\n    return updatedFavoriteNews;\r\n  };\r\n\r\n  // Получение избранных новостей пользователя\r\n  const getFavoriteNews = (userId) => {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    if (!user) return [];\r\n\r\n    const favoriteNewsIds = user.preferences.favoriteNews || [];\r\n    return news.filter(item => favoriteNewsIds.includes(item.id));\r\n  };\r\n\r\n  // Фильтрация новостей по категориям\r\n  const filterNewsByCategories = (categories) => {\r\n    if (!categories || categories.length === 0) {\r\n      return news;\r\n    }\r\n    return news.filter(item => categories.includes(item.category));\r\n  };\r\n\r\n  const value = {\r\n    news,\r\n    loading,\r\n    generateNews,\r\n    getNewsById,\r\n    likeNews,\r\n    addReaction,\r\n    toggleFavorite,\r\n    getFavoriteNews,\r\n    filterNewsByCategories\r\n  };\r\n\r\n  return (\r\n    <NewsContext.Provider value={value}>\r\n      {children}\r\n    </NewsContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}