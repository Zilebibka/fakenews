{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tema\\\\Desktop\\\\fakenews\\\\src\\\\contexts\\\\NewsContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { generateNewsTitle } from '../utils/titleGenerator';\nimport { generateNewsContent } from '../utils/contentGenerator';\nimport { getImageForNews } from '../utils/imageGenerator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NewsContext = /*#__PURE__*/createContext();\nexport const NewsProvider = ({\n  children\n}) => {\n  _s();\n  const [news, setNews] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Загружаем новости из localStorage при инициализации\n  useEffect(() => {\n    const savedNews = localStorage.getItem('news');\n    if (savedNews) {\n      setNews(JSON.parse(savedNews));\n    }\n    setLoading(false);\n  }, []);\n\n  // Сохраняем новости в localStorage при изменении\n  useEffect(() => {\n    if (!loading) {\n      localStorage.setItem('news', JSON.stringify(news));\n    }\n  }, [news, loading]);\n\n  // Генерация новой новости\n  const generateNews = category => {\n    // Убедимся, что категория существует или выберем случайную\n    const validCategories = ['politics', 'technology', 'sports', 'entertainment'];\n    const selectedCategory = category && validCategories.includes(category) ? category : validCategories[Math.floor(Math.random() * validCategories.length)];\n    const title = generateNewsTitle(selectedCategory);\n    const content = generateNewsContent(title, selectedCategory);\n    const image = getImageForNews(title, selectedCategory);\n    const newNews = {\n      id: Date.now().toString(),\n      title,\n      content,\n      image,\n      category: selectedCategory,\n      date: new Date().toISOString(),\n      likes: 0,\n      likedBy: [],\n      favoritedBy: [],\n      reactedBy: {},\n      reactions: {\n        laugh: 0,\n        surprise: 0,\n        sad: 0,\n        angry: 0\n      },\n      comments: []\n    };\n    setNews(prevNews => [newNews, ...prevNews]);\n    return newNews;\n  };\n\n  // Получение новости по ID\n  const getNewsById = id => {\n    return news.find(item => item.id === id) || null;\n  };\n\n  // Добавление лайка к новости\n  const likeNews = id => {\n    const currentUser = JSON.parse(localStorage.getItem('user'));\n    if (!currentUser) return;\n    const userId = currentUser.uid || currentUser.id;\n    setNews(prevNews => prevNews.map(item => {\n      if (item.id === id) {\n        // Проверяем, не лайкнул ли пользователь уже эту новость\n        const likedBy = item.likedBy || [];\n        if (likedBy.includes(userId)) {\n          // Если уже лайкнул, то убираем лайк\n          return {\n            ...item,\n            likes: item.likes - 1,\n            likedBy: likedBy.filter(uid => uid !== userId)\n          };\n        } else {\n          // Если еще не лайкнул, то добавляем лайк\n          return {\n            ...item,\n            likes: (item.likes || 0) + 1,\n            likedBy: [...likedBy, userId]\n          };\n        }\n      }\n      return item;\n    }));\n  };\n\n  // Добавление реакции к новости\n  const addReaction = (id, reaction, userId) => {\n    setNews(prevNews => prevNews.map(item => {\n      if (item.id === id) {\n        // Проверяем, не реагировал ли пользователь уже на эту новость\n        const reactedBy = item.reactedBy || {};\n        const userReaction = reactedBy[userId];\n\n        // Если пользователь уже реагировал этой реакцией, то убираем ее\n        if (userReaction === reaction) {\n          const newReactedBy = {\n            ...reactedBy\n          };\n          delete newReactedBy[userId];\n          return {\n            ...item,\n            reactions: {\n              ...item.reactions,\n              [reaction]: item.reactions[reaction] - 1\n            },\n            reactedBy: newReactedBy\n          };\n        }\n        // Если пользователь реагировал другой реакцией, то меняем ее\n        else if (userReaction) {\n          return {\n            ...item,\n            reactions: {\n              ...item.reactions,\n              [userReaction]: item.reactions[userReaction] - 1,\n              [reaction]: item.reactions[reaction] + 1\n            },\n            reactedBy: {\n              ...reactedBy,\n              [userId]: reaction\n            }\n          };\n        }\n        // Если пользователь еще не реагировал, то добавляем реакцию\n        else {\n          return {\n            ...item,\n            reactions: {\n              ...item.reactions,\n              [reaction]: item.reactions[reaction] + 1\n            },\n            reactedBy: {\n              ...reactedBy,\n              [userId]: reaction\n            }\n          };\n        }\n      }\n      return item;\n    }));\n  };\n\n  // Новая функция для реакций\n  const reactToNews = (id, reaction) => {\n    const currentUser = JSON.parse(localStorage.getItem('user'));\n    if (!currentUser) return;\n    const userId = currentUser.uid || currentUser.id;\n    addReaction(id, reaction, userId);\n  };\n\n  // Добавление новости в избранное\n  const addToFavorites = newsId => {\n    var _currentUser$preferen;\n    const currentUser = JSON.parse(localStorage.getItem('user'));\n    if (!currentUser) return;\n    const userId = currentUser.uid || currentUser.id;\n\n    // Обновляем список избранных новостей в объекте новости\n    setNews(prevNews => prevNews.map(item => {\n      if (item.id === newsId) {\n        const favoritedBy = item.favoritedBy || [];\n        if (!favoritedBy.includes(userId)) {\n          return {\n            ...item,\n            favoritedBy: [...favoritedBy, userId]\n          };\n        }\n      }\n      return item;\n    }));\n\n    // Обновляем список избранных новостей пользователя\n    const favoriteNews = ((_currentUser$preferen = currentUser.preferences) === null || _currentUser$preferen === void 0 ? void 0 : _currentUser$preferen.favoriteNews) || [];\n    if (!favoriteNews.includes(newsId)) {\n      const updatedUser = {\n        ...currentUser,\n        preferences: {\n          ...currentUser.preferences,\n          favoriteNews: [...favoriteNews, newsId]\n        }\n      };\n\n      // Сохраняем обновленного пользователя\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n\n      // Обновляем список пользователей\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const updatedUsers = users.map(u => u.id === userId || u.uid === userId ? updatedUser : u);\n      localStorage.setItem('users', JSON.stringify(updatedUsers));\n    }\n  };\n\n  // Удаление новости из избранного\n  const removeFromFavorites = newsId => {\n    var _currentUser$preferen2;\n    const currentUser = JSON.parse(localStorage.getItem('user'));\n    if (!currentUser) return;\n    const userId = currentUser.uid || currentUser.id;\n\n    // Обновляем список избранных новостей в объекте новости\n    setNews(prevNews => prevNews.map(item => {\n      if (item.id === newsId) {\n        const favoritedBy = item.favoritedBy || [];\n        if (favoritedBy.includes(userId)) {\n          return {\n            ...item,\n            favoritedBy: favoritedBy.filter(uid => uid !== userId)\n          };\n        }\n      }\n      return item;\n    }));\n\n    // Обновляем список избранных новостей пользователя\n    const favoriteNews = ((_currentUser$preferen2 = currentUser.preferences) === null || _currentUser$preferen2 === void 0 ? void 0 : _currentUser$preferen2.favoriteNews) || [];\n    if (favoriteNews.includes(newsId)) {\n      const updatedUser = {\n        ...currentUser,\n        preferences: {\n          ...currentUser.preferences,\n          favoriteNews: favoriteNews.filter(id => id !== newsId)\n        }\n      };\n\n      // Сохраняем обновленного пользователя\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n\n      // Обновляем список пользователей\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const updatedUsers = users.map(u => u.id === userId || u.uid === userId ? updatedUser : u);\n      localStorage.setItem('users', JSON.stringify(updatedUsers));\n    }\n  };\n\n  // Добавление новости в избранное (старая версия)\n  const toggleFavorite = (newsId, userId) => {\n    var _user$preferences;\n    // Получаем пользователя из localStorage\n    const user = JSON.parse(localStorage.getItem('user'));\n    if (!user) return;\n\n    // Проверяем, есть ли новость в избранном\n    const favoriteNews = ((_user$preferences = user.preferences) === null || _user$preferences === void 0 ? void 0 : _user$preferences.favoriteNews) || [];\n    const isFavorite = favoriteNews.includes(newsId);\n\n    // Обновляем список избранных новостей\n    const updatedFavoriteNews = isFavorite ? favoriteNews.filter(id => id !== newsId) : [...favoriteNews, newsId];\n\n    // Обновляем пользователя\n    const updatedUser = {\n      ...user,\n      preferences: {\n        ...user.preferences,\n        favoriteNews: updatedFavoriteNews\n      }\n    };\n\n    // Сохраняем обновленного пользователя\n    localStorage.setItem('user', JSON.stringify(updatedUser));\n\n    // Обновляем список пользователей\n    const users = JSON.parse(localStorage.getItem('users') || '[]');\n    const updatedUsers = users.map(u => u.id === userId || u.uid === userId ? updatedUser : u);\n    localStorage.setItem('users', JSON.stringify(updatedUsers));\n    return updatedFavoriteNews;\n  };\n\n  // Получение избранных новостей пользователя\n  const getFavoriteNews = userId => {\n    var _user$preferences2;\n    const user = JSON.parse(localStorage.getItem('user'));\n    if (!user) return [];\n    const favoriteNewsIds = ((_user$preferences2 = user.preferences) === null || _user$preferences2 === void 0 ? void 0 : _user$preferences2.favoriteNews) || [];\n    return news.filter(item => favoriteNewsIds.includes(item.id));\n  };\n\n  // Фильтрация новостей по категориям\n  const filterNewsByCategories = categories => {\n    if (!categories || categories.length === 0) {\n      return news;\n    }\n    return news.filter(item => categories.includes(item.category));\n  };\n  const value = {\n    news,\n    loading,\n    generateNews,\n    getNewsById,\n    likeNews,\n    addReaction,\n    reactToNews,\n    addToFavorites,\n    removeFromFavorites,\n    toggleFavorite,\n    getFavoriteNews,\n    filterNewsByCategories\n  };\n  return /*#__PURE__*/_jsxDEV(NewsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 331,\n    columnNumber: 5\n  }, this);\n};\n_s(NewsProvider, \"OtIbJq1/l0tV7xSNyTRw6ECKOBk=\");\n_c = NewsProvider;\nvar _c;\n$RefreshReg$(_c, \"NewsProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","generateNewsTitle","generateNewsContent","getImageForNews","jsxDEV","_jsxDEV","NewsContext","NewsProvider","children","_s","news","setNews","loading","setLoading","savedNews","localStorage","getItem","JSON","parse","setItem","stringify","generateNews","category","validCategories","selectedCategory","includes","Math","floor","random","length","title","content","image","newNews","id","Date","now","toString","date","toISOString","likes","likedBy","favoritedBy","reactedBy","reactions","laugh","surprise","sad","angry","comments","prevNews","getNewsById","find","item","likeNews","currentUser","userId","uid","map","filter","addReaction","reaction","userReaction","newReactedBy","reactToNews","addToFavorites","newsId","_currentUser$preferen","favoriteNews","preferences","updatedUser","users","updatedUsers","u","removeFromFavorites","_currentUser$preferen2","toggleFavorite","_user$preferences","user","isFavorite","updatedFavoriteNews","getFavoriteNews","_user$preferences2","favoriteNewsIds","filterNewsByCategories","categories","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Tema/Desktop/fakenews/src/contexts/NewsContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport { generateNewsTitle } from '../utils/titleGenerator';\r\nimport { generateNewsContent } from '../utils/contentGenerator';\r\nimport { getImageForNews } from '../utils/imageGenerator';\r\n\r\nexport const NewsContext = createContext();\r\n\r\nexport const NewsProvider = ({ children }) => {\r\n  const [news, setNews] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Загружаем новости из localStorage при инициализации\r\n  useEffect(() => {\r\n    const savedNews = localStorage.getItem('news');\r\n    if (savedNews) {\r\n      setNews(JSON.parse(savedNews));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Сохраняем новости в localStorage при изменении\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      localStorage.setItem('news', JSON.stringify(news));\r\n    }\r\n  }, [news, loading]);\r\n\r\n  // Генерация новой новости\r\n  const generateNews = (category) => {\r\n    // Убедимся, что категория существует или выберем случайную\r\n    const validCategories = ['politics', 'technology', 'sports', 'entertainment'];\r\n    const selectedCategory = category && validCategories.includes(category) \r\n      ? category \r\n      : validCategories[Math.floor(Math.random() * validCategories.length)];\r\n    \r\n    const title = generateNewsTitle(selectedCategory);\r\n    const content = generateNewsContent(title, selectedCategory);\r\n    const image = getImageForNews(title, selectedCategory);\r\n\r\n    const newNews = {\r\n      id: Date.now().toString(),\r\n      title,\r\n      content,\r\n      image,\r\n      category: selectedCategory,\r\n      date: new Date().toISOString(),\r\n      likes: 0,\r\n      likedBy: [],\r\n      favoritedBy: [],\r\n      reactedBy: {},\r\n      reactions: {\r\n        laugh: 0,\r\n        surprise: 0,\r\n        sad: 0,\r\n        angry: 0\r\n      },\r\n      comments: []\r\n    };\r\n\r\n    setNews(prevNews => [newNews, ...prevNews]);\r\n    return newNews;\r\n  };\r\n\r\n  // Получение новости по ID\r\n  const getNewsById = (id) => {\r\n    return news.find(item => item.id === id) || null;\r\n  };\r\n\r\n  // Добавление лайка к новости\r\n  const likeNews = (id) => {\r\n    const currentUser = JSON.parse(localStorage.getItem('user'));\r\n    if (!currentUser) return;\r\n    \r\n    const userId = currentUser.uid || currentUser.id;\r\n    \r\n    setNews(prevNews => \r\n      prevNews.map(item => {\r\n        if (item.id === id) {\r\n          // Проверяем, не лайкнул ли пользователь уже эту новость\r\n          const likedBy = item.likedBy || [];\r\n          if (likedBy.includes(userId)) {\r\n            // Если уже лайкнул, то убираем лайк\r\n            return {\r\n              ...item,\r\n              likes: item.likes - 1,\r\n              likedBy: likedBy.filter(uid => uid !== userId)\r\n            };\r\n          } else {\r\n            // Если еще не лайкнул, то добавляем лайк\r\n            return {\r\n              ...item,\r\n              likes: (item.likes || 0) + 1,\r\n              likedBy: [...likedBy, userId]\r\n            };\r\n          }\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n  };\r\n\r\n  // Добавление реакции к новости\r\n  const addReaction = (id, reaction, userId) => {\r\n    setNews(prevNews => \r\n      prevNews.map(item => {\r\n        if (item.id === id) {\r\n          // Проверяем, не реагировал ли пользователь уже на эту новость\r\n          const reactedBy = item.reactedBy || {};\r\n          const userReaction = reactedBy[userId];\r\n          \r\n          // Если пользователь уже реагировал этой реакцией, то убираем ее\r\n          if (userReaction === reaction) {\r\n            const newReactedBy = { ...reactedBy };\r\n            delete newReactedBy[userId];\r\n            \r\n            return {\r\n              ...item,\r\n              reactions: {\r\n                ...item.reactions,\r\n                [reaction]: item.reactions[reaction] - 1\r\n              },\r\n              reactedBy: newReactedBy\r\n            };\r\n          } \r\n          // Если пользователь реагировал другой реакцией, то меняем ее\r\n          else if (userReaction) {\r\n            return {\r\n              ...item,\r\n              reactions: {\r\n                ...item.reactions,\r\n                [userReaction]: item.reactions[userReaction] - 1,\r\n                [reaction]: item.reactions[reaction] + 1\r\n              },\r\n              reactedBy: {\r\n                ...reactedBy,\r\n                [userId]: reaction\r\n              }\r\n            };\r\n          } \r\n          // Если пользователь еще не реагировал, то добавляем реакцию\r\n          else {\r\n            return {\r\n              ...item,\r\n              reactions: {\r\n                ...item.reactions,\r\n                [reaction]: item.reactions[reaction] + 1\r\n              },\r\n              reactedBy: {\r\n                ...reactedBy,\r\n                [userId]: reaction\r\n              }\r\n            };\r\n          }\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n  };\r\n  \r\n  // Новая функция для реакций\r\n  const reactToNews = (id, reaction) => {\r\n    const currentUser = JSON.parse(localStorage.getItem('user'));\r\n    if (!currentUser) return;\r\n    \r\n    const userId = currentUser.uid || currentUser.id;\r\n    addReaction(id, reaction, userId);\r\n  };\r\n\r\n  // Добавление новости в избранное\r\n  const addToFavorites = (newsId) => {\r\n    const currentUser = JSON.parse(localStorage.getItem('user'));\r\n    if (!currentUser) return;\r\n    \r\n    const userId = currentUser.uid || currentUser.id;\r\n    \r\n    // Обновляем список избранных новостей в объекте новости\r\n    setNews(prevNews => \r\n      prevNews.map(item => {\r\n        if (item.id === newsId) {\r\n          const favoritedBy = item.favoritedBy || [];\r\n          if (!favoritedBy.includes(userId)) {\r\n            return {\r\n              ...item,\r\n              favoritedBy: [...favoritedBy, userId]\r\n            };\r\n          }\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n    \r\n    // Обновляем список избранных новостей пользователя\r\n    const favoriteNews = currentUser.preferences?.favoriteNews || [];\r\n    if (!favoriteNews.includes(newsId)) {\r\n      const updatedUser = {\r\n        ...currentUser,\r\n        preferences: {\r\n          ...currentUser.preferences,\r\n          favoriteNews: [...favoriteNews, newsId]\r\n        }\r\n      };\r\n      \r\n      // Сохраняем обновленного пользователя\r\n      localStorage.setItem('user', JSON.stringify(updatedUser));\r\n      \r\n      // Обновляем список пользователей\r\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\r\n      const updatedUsers = users.map(u => \r\n        u.id === userId || u.uid === userId ? updatedUser : u\r\n      );\r\n      localStorage.setItem('users', JSON.stringify(updatedUsers));\r\n    }\r\n  };\r\n  \r\n  // Удаление новости из избранного\r\n  const removeFromFavorites = (newsId) => {\r\n    const currentUser = JSON.parse(localStorage.getItem('user'));\r\n    if (!currentUser) return;\r\n    \r\n    const userId = currentUser.uid || currentUser.id;\r\n    \r\n    // Обновляем список избранных новостей в объекте новости\r\n    setNews(prevNews => \r\n      prevNews.map(item => {\r\n        if (item.id === newsId) {\r\n          const favoritedBy = item.favoritedBy || [];\r\n          if (favoritedBy.includes(userId)) {\r\n            return {\r\n              ...item,\r\n              favoritedBy: favoritedBy.filter(uid => uid !== userId)\r\n            };\r\n          }\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n    \r\n    // Обновляем список избранных новостей пользователя\r\n    const favoriteNews = currentUser.preferences?.favoriteNews || [];\r\n    if (favoriteNews.includes(newsId)) {\r\n      const updatedUser = {\r\n        ...currentUser,\r\n        preferences: {\r\n          ...currentUser.preferences,\r\n          favoriteNews: favoriteNews.filter(id => id !== newsId)\r\n        }\r\n      };\r\n      \r\n      // Сохраняем обновленного пользователя\r\n      localStorage.setItem('user', JSON.stringify(updatedUser));\r\n      \r\n      // Обновляем список пользователей\r\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\r\n      const updatedUsers = users.map(u => \r\n        u.id === userId || u.uid === userId ? updatedUser : u\r\n      );\r\n      localStorage.setItem('users', JSON.stringify(updatedUsers));\r\n    }\r\n  };\r\n\r\n  // Добавление новости в избранное (старая версия)\r\n  const toggleFavorite = (newsId, userId) => {\r\n    // Получаем пользователя из localStorage\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    if (!user) return;\r\n\r\n    // Проверяем, есть ли новость в избранном\r\n    const favoriteNews = user.preferences?.favoriteNews || [];\r\n    const isFavorite = favoriteNews.includes(newsId);\r\n\r\n    // Обновляем список избранных новостей\r\n    const updatedFavoriteNews = isFavorite\r\n      ? favoriteNews.filter(id => id !== newsId)\r\n      : [...favoriteNews, newsId];\r\n\r\n    // Обновляем пользователя\r\n    const updatedUser = {\r\n      ...user,\r\n      preferences: {\r\n        ...user.preferences,\r\n        favoriteNews: updatedFavoriteNews\r\n      }\r\n    };\r\n\r\n    // Сохраняем обновленного пользователя\r\n    localStorage.setItem('user', JSON.stringify(updatedUser));\r\n\r\n    // Обновляем список пользователей\r\n    const users = JSON.parse(localStorage.getItem('users') || '[]');\r\n    const updatedUsers = users.map(u => \r\n      u.id === userId || u.uid === userId ? updatedUser : u\r\n    );\r\n    localStorage.setItem('users', JSON.stringify(updatedUsers));\r\n\r\n    return updatedFavoriteNews;\r\n  };\r\n\r\n  // Получение избранных новостей пользователя\r\n  const getFavoriteNews = (userId) => {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    if (!user) return [];\r\n\r\n    const favoriteNewsIds = user.preferences?.favoriteNews || [];\r\n    return news.filter(item => favoriteNewsIds.includes(item.id));\r\n  };\r\n\r\n  // Фильтрация новостей по категориям\r\n  const filterNewsByCategories = (categories) => {\r\n    if (!categories || categories.length === 0) {\r\n      return news;\r\n    }\r\n    return news.filter(item => categories.includes(item.category));\r\n  };\r\n\r\n  const value = {\r\n    news,\r\n    loading,\r\n    generateNews,\r\n    getNewsById,\r\n    likeNews,\r\n    addReaction,\r\n    reactToNews,\r\n    addToFavorites,\r\n    removeFromFavorites,\r\n    toggleFavorite,\r\n    getFavoriteNews,\r\n    filterNewsByCategories\r\n  };\r\n\r\n  return (\r\n    <NewsContext.Provider value={value}>\r\n      {children}\r\n    </NewsContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}